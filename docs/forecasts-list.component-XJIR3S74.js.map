{
  "version": 3,
  "sources": ["file:src\\app\\weather\\features\\forecasts-list\\forecasts-list.component.html", "file:src\\app\\weather\\features\\forecasts-list\\forecasts-list.component.css", "src/app/weather/features/forecasts-list/forecasts-list.component.ts"],
  "sourcesContent": ["<div>\r\n  <div class=\"panel panel-default\">\r\n    @if (forecast$ | async; as forecast) {\r\n      <div class=\"panel-heading\">\r\n        <h3 class=\"panel-title\">5-day forecast for {{ forecast?.city.name }}</h3>\r\n      </div>\r\n      <ul class=\"list-group\">\r\n        @for (dailyForecast of forecast?.list; track dailyForecast) {\r\n          <li class=\"list-group-item\">\r\n            {{ dailyForecast.dt * 1000 | date: 'EEEE, MMM d' }}:\r\n            {{ dailyForecast.weather[0].main }}\r\n            - Min: {{ dailyForecast.temp.min | number: '.0-0' }} - Max: {{ dailyForecast.temp.max | number: '.0-0' }}\r\n\r\n            <img [src]=\"dailyForecast.iconUrl\" alt=\"\" class=\"icon\" />\r\n          </li>\r\n        }\r\n      </ul>\r\n    }\r\n  </div>\r\n</div>\r\n<button class=\"btn btn-success\" [routerLink]=\"'/'\">< Back to main page</button>\r\n", "/* src/app/weather/features/forecasts-list/forecasts-list.component.css */\n.icon {\n  width: 45px;\n  height: 45px;\n  position: absolute;\n  right: 20px;\n  top: -2px;\n}\n/*# sourceMappingURL=forecasts-list.component.css.map */\n", "import { AsyncPipe, DatePipe, DecimalPipe } from '@angular/common';\r\nimport { Component, inject, input, Signal } from '@angular/core';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { RouterLink } from '@angular/router';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { WeatherService } from '@shared/services/weather.service';\r\n\r\n@Component({\r\n  selector: 'app-forecasts-list',\r\n  templateUrl: './forecasts-list.component.html',\r\n  styleUrls: ['./forecasts-list.component.css'],\r\n  imports: [AsyncPipe, RouterLink, DecimalPipe, DatePipe],\r\n})\r\nexport class ForecastsListComponent {\r\n  private readonly weatherService = inject(WeatherService);\r\n\r\n  /**\r\n   * The zip code give in path of the URL\r\n   */\r\n  protected readonly zipcode: Signal<string> = input.required<string>();\r\n\r\n  /**\r\n   * Observable of the zip code given in the path of the URL\r\n   */\r\n  private readonly zipcode$ = toObservable(this.zipcode);\r\n\r\n  /**\r\n   * The forecast data for the given zip code\r\n   */\r\n  protected readonly forecast$ = this.zipcode$.pipe(\r\n    switchMap((zipcode: string) => this.weatherService.getForecastWithIcon(zipcode)),\r\n  );\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,oCAAA;;;;;;;;;ACaO,IAAM,yBAAN,MAAMC,wBAAsB;EAA5B,cAAA;AACY,SAAA,iBAAiB,OAAO,cAAc;mBAKV,MAAM,SAAQ;AAK1C,SAAA,WAAW,aAAa,KAAK,OAAO;AAKlC,SAAA,YAAY,KAAK,SAAS,KAC3C,UAAU,CAAC,YAAoB,KAAK,eAAe,oBAAoB,OAAO,CAAC,CAAC;;;;;;;;AAjBvE,yBAAsB,WAAA;EANlC,UAAU;IACT,UAAU;IACV,UAAA;IAEA,SAAS,CAAC,WAAW,YAAY,aAAa,QAAQ;;GACvD;GACY,sBAAsB;",
  "names": ["forecasts_list_component_default", "ForecastsListComponent"]
}
