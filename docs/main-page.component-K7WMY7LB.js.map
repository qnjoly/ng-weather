{
  "version": 3,
  "sources": ["file:src\\app\\weather\\features\\main-page\\main-page.component.html", "file:src\\app\\weather\\features\\main-page\\zipcode-entry\\zipcode-entry.component.html", "src/app/shared/validators/location.validator.ts", "src/app/shared/validators/weather.validator.ts", "src/app/weather/features/main-page/zipcode-entry/zipcode-entry.component.ts", "file:src\\app\\weather\\features\\main-page\\current-conditions\\current-conditions.component.html", "file:src\\app\\weather\\features\\main-page\\current-conditions\\current-conditions.component.css", "src/app/weather/features/main-page/current-conditions/current-conditions.component.ts", "file:src\\app\\shared\\components\\tab-group\\tab-group.component.html", "file:src\\app\\shared\\components\\tab-group\\tab-group.component.css", "file:src\\app\\shared\\components\\tab-group\\tab\\tab.component.html", "src/app/shared/components/tab-group/tab/tab.component.ts", "src/app/shared/components/tab-group/tab-group.component.ts", "src/app/weather/features/main-page/main-page.component.ts"],
  "sourcesContent": ["<div class=\"container-fluid\">\r\n  <app-zipcode-entry (addZipcode)=\"addLocation($event)\"></app-zipcode-entry>\r\n  @if (currentConditionsByZip(); as currentConditionsByZip) {\r\n    <app-tab-group (onTabClosed)=\"removeLocationByIndex($event)\">\r\n      @for (currentCondition of currentConditionsByZip; track currentCondition.zip) {\r\n        <app-tab [closeable]=\"true\" [title]=\"currentCondition.data?.name + ' (' + currentCondition.zip + ')'\">\r\n          <app-current-conditions [currentConditionByZip]=\"currentCondition\" />\r\n        </app-tab>\r\n      }\r\n    </app-tab-group>\r\n  }\r\n</div>\r\n", "<form class=\"well\" [formGroup]=\"form\" (submit)=\"submit()\">\n  <h2>Enter a zipcode:</h2>\n  <input type=\"text\" formControlName=\"zipcode\" placeholder=\"Zipcode\" class=\"form-control\" />\n  @if (form.controls.zipcode.invalid && (form.controls.zipcode.touched || form.controls.zipcode.dirty)) {\n    @if (form.controls.zipcode.errors?.required) {\n      <p>Zipcode is required.</p>\n    }\n    @if (form.controls.zipcode.errors?.pattern) {\n      <p>Please enter a valid zipcode.</p>\n    }\n    @if (form.controls.zipcode.errors?.locationAlreadyExists) {\n      <p>Location already in list.</p>\n    }\n    @if (form.controls.zipcode.errors?.weatherNotAvailable) {\n      <p>Weather not available for this location.</p>\n    }\n  }\n  <br />\n  <button class=\"btn btn-primary\" type=\"submit\">Add location</button>\n</form>\n", "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { LocationService } from '../services/location.service';\r\n\r\nexport class LocationValidator {\r\n  /**\r\n   * Check if the location is already registered\r\n   * @param locationService The location service\r\n   * @returns An async validator function that checks if the location is already registered\r\n   */\r\n  public static checkIfLocationAlreadyRegistered(locationService: LocationService): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors> => {\r\n      return locationService.locations$.pipe(\r\n        map((locations: string[]) => (locations.includes(control.value) ? { locationAlreadyExists: true } : null)),\r\n        take(1),\r\n      );\r\n    };\r\n  }\r\n}\r\n", "import { AsyncValidatorFn, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { WeatherService } from '../services/weather.service';\r\n\r\nexport class WeatherValidator {\r\n  /**\r\n   * Check if the weather is available for the location\r\n   */\r\n  public static checkIfWeatherAvailable(weatherService: WeatherService): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors> => {\r\n      return weatherService.getCurrentConditions(control.value).pipe(\r\n        map((forecast) => (forecast ? null : { weatherNotAvailable: true })),\r\n        catchError(() => of({ weatherNotAvailable: true })),\r\n      );\r\n    };\r\n  }\r\n}\r\n", "import { Component, inject, output } from '@angular/core';\r\nimport { FormBuilder, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { LocationService } from '@shared/services/location.service';\r\nimport { LocationValidator } from '@shared/validators/location.validator';\r\nimport { WeatherService } from '@shared/services/weather.service';\r\nimport { WeatherValidator } from '@shared/validators/weather.validator';\r\nimport { JsonPipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-zipcode-entry',\r\n  templateUrl: './zipcode-entry.component.html',\r\n  imports: [FormsModule, ReactiveFormsModule],\r\n})\r\nexport class ZipcodeEntryComponent {\r\n  private readonly locationService = inject(LocationService);\r\n  private readonly weatherService = inject(WeatherService);\r\n  private readonly fb = inject(FormBuilder);\r\n\r\n  /**\r\n   * Event emitted when a zipcode is added\r\n   */\r\n  public readonly addZipcode = output<string>();\r\n\r\n  /**\r\n   * The form to add a location\r\n   */\r\n  protected readonly form = this.fb.group({\r\n    zipcode: [\r\n      '',\r\n      [Validators.required, Validators.pattern(/^\\d{5}(?:-\\d{4})?$/)],\r\n      [\r\n        LocationValidator.checkIfLocationAlreadyRegistered(this.locationService),\r\n        WeatherValidator.checkIfWeatherAvailable(this.weatherService),\r\n      ],\r\n    ],\r\n  });\r\n\r\n  protected submit() {\r\n    // Only add the location if the form is valid\r\n    if (!this.form.valid) return;\r\n    // Add the location to the list of locations\r\n    const { zipcode } = this.form.value;\r\n    this.addZipcode.emit(zipcode);\r\n  }\r\n}\r\n", "@if (currentConditionByZip(); as location) {\r\n  <div class=\"well flex\">\r\n    <div>\r\n      <h3>{{ location.data.name }} ({{ location.zip }})</h3>\r\n      <h4>Current conditions: {{ location.data.weather[0].main }}</h4>\r\n      <h4>Temperatures today:</h4>\r\n      <p>\r\n        Current {{ location.data.main.temp | number: '.0-0' }} - Max\r\n        {{ location.data.main.temp_max | number: '.0-0' }} - Min {{ location.data.main.temp_min | number: '.0-0' }}\r\n      </p>\r\n      <p>\r\n        <a [routerLink]=\"['/forecast', location.zip]\">Show 5-day forecast for {{ location.data.name }}</a>\r\n      </p>\r\n    </div>\r\n    <div>\r\n      <img [src]=\"location.data.iconUrl\" alt=\"\" />\r\n    </div>\r\n  </div>\r\n}\r\n", "/* src/app/weather/features/main-page/current-conditions/current-conditions.component.css */\n.close {\n  cursor: pointer;\n}\n.flex {\n  display: flex;\n  justify-content: space-between;\n}\n/*# sourceMappingURL=current-conditions.component.css.map */\n", "import { DecimalPipe } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { ConditionsAndZip } from '@weather/types/conditions-and-zip.type';\r\n\r\n@Component({\r\n  selector: 'app-current-conditions',\r\n  templateUrl: './current-conditions.component.html',\r\n  styleUrls: ['./current-conditions.component.css'],\r\n  imports: [RouterLink, DecimalPipe],\r\n})\r\nexport class CurrentConditionsComponent {\r\n  /**\r\n   * Current conditions to display for a location\r\n   */\r\n  public readonly currentConditionByZip = input.required<ConditionsAndZip>();\r\n}\r\n", "<div>\r\n  <ul>\r\n    @for (tab of tabs(); track tab.id; let index = $index) {\r\n      <li>\r\n        <button type=\"button\" (click)=\"selectTab(index)\">\r\n          {{ tab.title() }}\r\n        </button>\r\n        @if (tab.closeable()) {\r\n          <button type=\"button\" (click)=\"closeTab(index)\">&times;</button>\r\n        }\r\n      </li>\r\n    }\r\n  </ul>\r\n  <div>\r\n    @if (tabs()[selectedIndex()]?.content()) {\r\n      <ng-container *ngTemplateOutlet=\"tabs()[selectedIndex()]?.content()\"></ng-container>\r\n    }\r\n  </div>\r\n</div>\r\n", "/* src/app/shared/components/tab-group/tab-group.component.css */\nul {\n  display: flex;\n  flex-wrap: wrap;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\nli {\n  background-color: #617aa0;\n  color: #fff;\n  border: solid 1px #e3e3e3;\n  padding: 5px 10px;\n  display: flex;\n  gap: 5px;\n}\nbutton {\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n}\n/*# sourceMappingURL=tab-group.component.css.map */\n", "<ng-template #contentTemplate><ng-content></ng-content></ng-template>\r\n", "import { booleanAttribute, Component, input, viewChild } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-tab',\r\n  templateUrl: './tab.component.html',\r\n})\r\nexport class TabComponent {\r\n  /**\r\n   * Incrementing ID for each tab component\r\n   */\r\n  private static ID = 0;\r\n  /**\r\n   * The unique ID of the tab\r\n   */\r\n  public id = TabComponent.ID++;\r\n  /**\r\n   * The title of the tab\r\n   */\r\n  public title = input<string>();\r\n  /**\r\n   * Whether the tab is closeable\r\n   */\r\n  public closeable = input(false, { transform: booleanAttribute });\r\n  /**\r\n   * Current content of the tab\r\n   */\r\n  public content = viewChild('contentTemplate');\r\n}\r\n", "import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, contentChildren, model, output, OutputEmitterRef, Signal, WritableSignal } from '@angular/core';\r\nimport { TabComponent } from './tab/tab.component';\r\n\r\n@Component({\r\n  selector: 'app-tab-group',\r\n  templateUrl: './tab-group.component.html',\r\n  styleUrl: './tab-group.component.css',\r\n  imports: [NgTemplateOutlet],\r\n})\r\nexport class TabGroupComponent {\r\n  /**\r\n   * The tabs in the tab group\r\n   */\r\n  public tabs: Signal<readonly TabComponent[]> = contentChildren(TabComponent);\r\n\r\n  /**\r\n   * The index of the selected tab\r\n   */\r\n  public selectedIndex: WritableSignal<number> = model(0);\r\n\r\n  /**\r\n   * Emitted when a tab is closed\r\n   */\r\n  public onTabClosed: OutputEmitterRef<number> = output();\r\n\r\n  /**\r\n   * Select a tab\r\n   * @param index The index of the tab to select\r\n   * @param tab The tab to select\r\n   */\r\n  protected selectTab(index: number) {\r\n    this.selectedIndex.set(index);\r\n  }\r\n\r\n  /**\r\n   * Close the tab\r\n   * @param tab The tab to close\r\n   */\r\n  protected closeTab(index: number) {\r\n    // If the selected tab is closed, select the first tab\r\n    if (this.selectedIndex() === index) {\r\n      this.selectedIndex.set(0);\r\n    }\r\n    // Notify that the tab is closed\r\n    this.onTabClosed.emit(index);\r\n  }\r\n}\r\n", "import { Component, inject, Signal } from '@angular/core';\r\nimport { ZipcodeEntryComponent } from './zipcode-entry/zipcode-entry.component';\r\nimport { CurrentConditionsComponent } from './current-conditions/current-conditions.component';\r\nimport { TabGroupComponent } from '@shared/components/tab-group/tab-group.component';\r\nimport { TabComponent } from '@shared/components/tab-group/tab/tab.component';\r\nimport { LocationWeatherService } from '@weather/services/location-weather.service';\r\nimport { ConditionsAndZip } from '@weather/types/conditions-and-zip.type';\r\nimport { LocationService } from '@shared/services/location.service';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  imports: [TabGroupComponent, TabComponent, ZipcodeEntryComponent, CurrentConditionsComponent],\r\n})\r\nexport class MainPageComponent {\r\n  private readonly locationService = inject(LocationService);\r\n  private readonly locationWeatherService = inject(LocationWeatherService);\r\n\r\n  /**\r\n   * The current conditions for all locations\r\n   */\r\n  protected readonly currentConditionsByZip: Signal<ConditionsAndZip[]> =\r\n    this.locationWeatherService.getCurrentConditions;\r\n\r\n  /**\r\n   * Remove a location from the list of locations\r\n   * @param index The index of the location to remove\r\n   */\r\n  protected removeLocationByIndex(index: number): void {\r\n    const zip = this.currentConditionsByZip()[index].zip;\r\n    this.locationService.removeLocation(zip);\r\n  }\r\n\r\n  /**\r\n   * Add a location to the list of locations\r\n   * @param zipcode The zipcode to add\r\n   */\r\n  protected addLocation(zipcode: string): void {\r\n    this.locationService.addLocation(zipcode);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["ZipcodeEntryComponent", "current_conditions_component_default", "CurrentConditionsComponent", "__decorate", "tab_group_component_default", "TabComponent", "__decorate", "TabGroupComponent", "__decorate", "MainPageComponent", "__decorate"]
}
